{"version":3,"sources":["Images/Malachite.png","Images/Sapphire.png","Images/Ruby.png","Images/Amethyst.png","Images/Quartz.png","Images/Yellow.png","Images/Orange.png","Images/Black.png","config.js","Bracelet/Bracelet.js","Stones/Stones.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","images","malachite","Malachite","sapphire","Sapphire","ruby","Ruby","amethyst","Amethyst","quartz","Quartz","yellow","Yellow","orange","Orange","black","Black","stones","id","name","text","Bracelet","_ref","radius","selectStone","selectAllOfType","deselectAll","react_default","a","createElement","className","style","--containerWidth","concat","onClick","console","log","map","stone","i","key","--angle","length","--parentWidth","filter","selected","e","stopPropagation","onDoubleClick","src","width","height","alt","settings","infinite","centerPadding","slidesToShow","swipeToSlide","Stones","props","lib_default","Object","toConsumableArray","setSelectedStones","carouselContainer","document","querySelector","innerHTML","src_Stones_Stones","ReactDOM","createPortal","Stones_Stones_Stones","sizes","large","numberStones","medium","small","createStones","numberStonesRequired","slice","Array","fill","allStones","defaultStoneList","App","_useState","useState","_useState2","slicedToArray","setStones","_useState3","_useState4","setRadius","handler","size","target","value","btn-type","src_Bracelet_Bracelet","selectIndex","index","objectSpread","chosenStone","newStone","Boolean","window","location","hostname","match","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08b88756.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Malachite.3ac2d24f.png\";","module.exports = __webpack_public_path__ + \"static/media/Sapphire.d35842dc.png\";","module.exports = __webpack_public_path__ + \"static/media/Ruby.2eab8114.png\";","module.exports = __webpack_public_path__ + \"static/media/Amethyst.fcd627ee.png\";","module.exports = __webpack_public_path__ + \"static/media/Quartz.ba4da43f.png\";","module.exports = __webpack_public_path__ + \"static/media/Yellow.f6cb2ae1.png\";","module.exports = __webpack_public_path__ + \"static/media/Orange.603a464f.png\";","module.exports = __webpack_public_path__ + \"static/media/Black.e26d7f91.png\";","\nimport Malachite from './Images/Malachite.png'\nimport Sapphire from './Images/Sapphire.png'\nimport Ruby from './Images/Ruby.png'\nimport Amethyst from './Images/Amethyst.png'\nimport Quartz from './Images/Quartz.png'\nimport Yellow from './Images/Yellow.png'\nimport Orange from './Images/Orange.png'\nimport Black from './Images/Black.png'\n\nexport const images = {\n    malachite: Malachite,\n    sapphire: Sapphire,\n    ruby: Ruby,\n    amethyst: Amethyst,\n    quartz: Quartz,\n    yellow: Yellow,\n    orange: Orange,\n    black: Black,\n}\n\nexport const stones = [\n    { id: \"malachite\", name: \"Malachite\", text: 'This is Malachite' },\n    { id: \"sapphire\", name: \"Sapphire\", text: 'This is Sapphire' },\n    { id: \"ruby\", name: \"Ruby\", text: 'This is Ruby' },\n    { id: \"amethyst\", name: \"Amethyst\", text: 'This is Amethyst' },\n    { id: \"quartz\", name: \"Quartz\", text: 'This is Quartz' },\n    { id: \"yellow\", name: \"Yellow\", text: 'This is Yellow' },\n    { id: \"orange\", name: \"Orange\", text: 'This is Orange' },\n    { id: \"black\", name: \"Black\", text: 'This is Black' },\n]\n","import React from 'react';\nimport './Bracelet.scss';\nimport { images } from '../config';\n\nconst Bracelet = ({ stones, radius, selectStone, selectAllOfType, deselectAll }) => (\n  <div className=\"stoneContainerContainer\">\n\n    <div className=\"stoneContainer\" style={{ '--containerWidth': `${radius}px` }} onClick={() => {\n      console.log(\"Deselect All\")\n      deselectAll()\n    }}>\n      {\n        stones.map((stone, i) => (\n          <div\n            key={i}\n            className=\"stone\"\n\n            style={{\n              '--angle': (270 + (360 / stones.length) * i) + \"deg\",\n              '--parentWidth': `${radius}px`,\n              filter: stone.selected && 'drop-shadow(0px 0px 5px #48E1FF)'\n            }}\n            onClick={(e) => { selectStone(stones, i); e.stopPropagation() }}\n            onDoubleClick={() => {\n              selectAllOfType(stone)\n            }}\n          >\n            <img src={images[stone.id]} style={{ width: \"100%\", height: \"100%\" }} alt={stone.text} />\n          </div>\n        ))\n      }\n    </div>\n  </div>\n)\n\nexport default Bracelet;\n","\nimport React from 'react';\nimport './Stones.scss'\nimport { images } from '../config';\nimport ReactDOM from 'react-dom';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport '../Faded.scss';\n\nconst settings = {\n  className: \"center\",\n  infinite: true,\n  centerPadding: \"60px\",\n  slidesToShow: 8,\n  swipeToSlide: true,\n  \n};\nconst Stones = props => {\n  return (\n      <div>      \n      <Slider {...settings}>\n        {\n          [\n            ...props.stones,\n            ...props.stones\n          ].map(stone => (\n            <div>\n              <div className=\"stone-container\">\n                <p className=\"stone-title\">{stone.name}</p>\n              </div>\n              <img className=\"stoneId\" src={images[stone.id]} alt={stone.text} onClick={() => { props.setSelectedStones(stone) }} />\n            </div>\n          ))\n        }\n      </Slider>\n      </div>\n  )\n}\n\nconst carouselContainer = document.querySelector('.carouselContainer')\ncarouselContainer.innerHTML = \"\"\n\nexport default props => ReactDOM.createPortal(\n  <Stones {...props} />,\n  carouselContainer\n\n);","import React, { useState } from 'react';\nimport Bracelet from './Bracelet/Bracelet';\nimport Stones from './Stones/Stones';\nimport { stones as allStones } from './config';\nimport './App.scss';\n\nconst sizes = {\n  large: {\n    id: 'large',\n    numberStones: 24,\n    radius: 500\n  },\n  medium: {\n    id: 'medium',\n    numberStones: 22,\n    radius: 450\n  },\n  small: {\n    id: 'small',\n    numberStones: 20,\n    radius: 400\n  }\n}\n\nconst createStones = (stones, numberStonesRequired) => {\n  if (numberStonesRequired < stones.length) {\n    return stones.slice(0, numberStonesRequired)\n  } else {\n    return [\n      ...stones,\n      ...Array(numberStonesRequired - stones.length).fill(allStones[0])\n    ]\n  }\n}\n\n\n// const BraceletSizeSelector = ({ handler }) => (\n//   <div>\n//     <button onClick={handler} value=\"small\">Small</button>\n//     <button onClick={handler} value=\"medium\">Medium</button>\n//     <button onClick={handler} value=\"large\">Large</button>\n//   </div>\n// );\n\nconst defaultStoneList = createStones([], sizes.large.numberStones);\n\nconst App = () => {\n  const [stones, setStones] = useState(defaultStoneList);\n  const [radius, setRadius] = useState(sizes.large.radius);\n\n  const handler = (e) => {\n    const size = sizes[e.target.value]\n    setStones(createStones(stones, size.numberStones))\n    setRadius(size.radius)\n  }\n\n  const selectStone = (stones, selectIndex) => setStones(stones.map((stone, index) =>\n    selectIndex === index ? {\n      ...stone, selected: !stone.selected\n    } : stone\n  ))\n\n  const setSelectedStones = (newStone) => setStones(stones.map(stone =>\n    stone.selected ? newStone : stone\n  ))\n\n  const deselectAll = () => setStones(stones.map(stone => ({ ...stone, selected: false })))\n\n  const selectAllOfType = chosenStone => {\n    setStones(stones.map(stone =>\n      stone.id === chosenStone.id ? { ...stone, selected: true } : { ...stone, selected: false }\n    ))\n  }\n\n\n  const SizeButtons = () => (\n\n    <div id=\"buttonContainer\">\n      <button btn-type=\"smallbtn\" className=\"btn\" onClick={handler} value=\"small\">\n        Small Bracelet <br />\n        6.5\"\n    </button>\n      <button btn-type=\"mediumbtn\" className=\"btn activebtn\" onClick={handler} value=\"medium\">\n        Medium Bracelet <br />\n        7\"\n    </button>\n      <button btn-type=\"largebtn\" className=\"btn\" onClick={handler} value=\"large\">\n        Large Bracelet <br />\n        7.5\"\n    </button>\n    </div>\n\n  )\n\n\n  return (\n    <div className=\"pageContainer\">\n      <div>\n        <SizeButtons />\n        <Bracelet selectStone={selectStone} radius={radius} stones={stones} selectAllOfType={selectAllOfType} deselectAll={deselectAll} />\n        <Stones stones={allStones} setSelectedStones={setSelectedStones} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('.braceletContainer'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}